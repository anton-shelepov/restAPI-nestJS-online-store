generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  hash         String
  role         Role          @default(USER)
  hashedRt     String?
  fullName     String?
  address      String?
  phone        String?
  gender       String?
  profileImage ProfileImage?
  basket       Basket?
  favorite     Favorite?
  review       Review[]

  @@map("users")
}

model ProfileImage {
  id       Int    @id @default(autoincrement())
  fileName String
  userId   Int?   @unique
  user     User?  @relation(fields: [userId], references: [id])

  @@map("profile_images")
}

enum Role {
  USER
  ADMIN
}

model Basket {
  userId   Int       @id
  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@map("baskets")
}

model Favorite {
  userId   Int       @id
  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@map("favorites")
}

model Category {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  categoryName        String    @unique
  categoryCatalogName String
  image               String?
  icon                String?
  products            Product[]

  @@map("categories")
}

model Product {
  id         Int            @id @default(autoincrement())
  title      String
  mainSpecs  String
  isInStock  Boolean
  price      Int
  rating     Int?
  discount   Int?
  images     ProductImage[]
  specs      SpecGroup[]
  reviews    Review[]
  basket     Basket[]
  favorite   Favorite[]
  categoryId Int?
  category   Category?      @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  fileName  String
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model SpecGroup {
  id              Int              @id @default(autoincrement())
  specGroupTitle  String
  specGroupValues SpecGroupValue[]
  product         Product?         @relation(fields: [productId], references: [id])
  productId       Int?

  @@map("spec_groups")
}

model SpecGroupValue {
  id          Int        @id @default(autoincrement())
  value       String[]
  specGroupId Int?
  specGroup   SpecGroup? @relation(fields: [specGroupId], references: [id])

  @@map("spec_group_values")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usedTerm  String
  dignity   String
  flaws     String
  comment   String
  rating    Int
  authorId  Int?
  author    User?    @relation(fields: [authorId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])

  @@map("reviews")
}
